def label = "spacemesh-pod-${UUID.randomUUID().toString()}"
podTemplate(label: label, containers: [
    containerTemplate(name: 'docker', image: 'docker', ttyEnabled: true, command: 'cat'),
    containerTemplate(name: 'kubectl', image: 'lachlanevenson/k8s-kubectl:v1.8.0', command: 'cat', ttyEnabled: true),
    containerTemplate(name: 'git', image: 'alpine/git', command: 'cat', ttyEnabled: true),
    containerTemplate(name: 'python', image: 'spacemeshos/go-spacemesh-python:main', command: 'cat', alwaysPullImage: true, ttyEnabled: true)
  ],
  volumes: [
    hostPathVolume(mountPath: '/var/run/docker.sock', hostPath: '/var/run/docker.sock'),
  ])
{
  node(label) {
    withCredentials([string(credentialsId: 'ES_PASSWD', variable: 'SECRET')]) {
        stage('Run pytest') {
            git branch: "${TESTS_BRANCH}",url: 'https://github.com/spacemeshos/go-spacemesh.git'
            configFileProvider([configFile(fileId: kubeconfig, variable: 'KUBE_CONF')]) { 
                container('python') {
                    script {
                        sh """
                            mkdir -p .kube && touch .kube/config
                            cat ${KUBE_CONF} > ${WORKSPACE}/.kube/config
                        """
                        if ("${TESTS}" == 'All') {
                            sh """
                                echo "Run All tests"
                                export ES_PASSWD="${SECRET}"
                                pytest -s -v ./tests/p2p/test_p2p.py --tc-file=./tests/p2p/config.yaml --tc-format=yaml
                            """
                        }
                        else {
                            sh """
                                echo "Run test: ${TESTS}"
                                export ES_PASSWD="${SECRET}"
                                export PYTHONUNBUFFERED=1
                                pytest -s -v ./tests/p2p/test_p2p.py::"${TESTS}" --tc-file=./tests/p2p/config.yaml --tc-format=yaml
                            """
                        }
                    }
                }
            }
        }
    }
  }
}
