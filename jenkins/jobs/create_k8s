pipeline {
    agent {
        kubernetes {
            label 'spacemesh-pod'
            yaml """
apiVersion: v1
kind: Pod
metadata:
  name: spacemesh-pod
spec:
  containers:
  - command:
    - "cat"
    image: "hashicorp/terraform"
    name: "terraform"
    tty: true
    volumeMounts:
    - mountPath: "/home/jenkins/agent"
      name: "workspace-volume"
      readOnly: false      
  - name: docker
    image: docker:18.09
    imagePullPolicy: IfNotPresent
    command:
    - cat
    tty: true
    volumeMounts:
      - name: docker
        mountPath: /var/run/docker.sock
  - name: git
    image: alpine/git
    command:
    - cat
    tty: true
  - name: helm
    image: dtzar/helm-kubectl
    command:
    - cat
    tty: true
  - name: gcloud
    image: gcr.io/cloud-builders/gcloud
    imagePullPolicy: Always
    command:
    - cat
    tty: true
  - name: python
    image: spacemeshos/go-spacemesh-python:main
    imagePullPolicy: Always
    command:
    - cat
    tty: true
  volumes:
  - name: docker
    hostPath:
      path: /var/run/docker.sock
"""
        }
    }
    options { timestamps () }
    environment {
      // Slack configuration
      SLACK_COLOR_DANGER  = '#E01563'
      KUBECONFIG = "${WORKSPACE}"+'/kube-config/config'
    }
    stages {
        stage('Pre Install stage') {
            steps {
                git branch: 'master', url: 'https://github.com/spacemeshos/k8sm.git'
                configFileProvider([configFile(fileId: 'google_app_cred', variable: 'GOOGLE_CRED')]) {
                    container('terraform') {
                        script {
                            echo 'Cluster create'
                            sh """
                                cp ${GOOGLE_CRED} ${WORKSPACE}/google_application_cred
                                export GOOGLE_APPLICATION_CREDENTIALS='${WORKSPACE}/google_application_cred'
                                cd ${WORKSPACE}/deployment/GCP/terraform
                                terraform init
                                terraform plan -var="cluster_name=someclustername" -var="zone=us-west1-a" -var="project_name=spacemesh-198810" -auto-approve
                            """
                        }
                    }                      
/*                    container('gcloud') {
                        script {
                            sh """
                                echo "${KUBECONFIG}"
                                cp ${GOOGLE_CRED} ${WORKSPACE}/google_application_cred
                                export GOOGLE_APPLICATION_CREDENTIALS='${WORKSPACE}/google_application_cred'
                                gcloud auth activate-service-account --key-file ${WORKSPACE}/google_application_cred
                                gcloud config set project spacemesh-198810
                                gcloud container clusters get-credentials 'spacemesh-xxx' --zone 'us-central1-a' --project spacemesh-198810
                            """

                            echo "Set Context"
                            sh """
                               kubectl config current-context
                               kubectl config use-context gke_spacemesh-198810_us-central1-a_spacemesh-xxx
                            """
                            
                            echo "Create namespace"
                                try {
                                    sh """
                                        kubectl config current-context
                                        kubectl create namespace logging
                                    """
                                }catch (Exception e) {
                                    echo "Namespace logging already exist"
                                }

                            echo "Define storage class"
                            try {
                                sh """
                                    kubectl create -f ${WORKSPACE}/k8s-logging/storage_class_ssd.yaml
                                """
                            }catch (Exception e) {
                                echo "Storage Class already exist"
                            }
                        }
                    }
*/                    
                }
            }
        }
/*        stage('Install Helm') {
            steps {
                container('helm') {
                    script {
                        echo 'Install Helm'
                        sh """
                            kubectl config current-context
                            kubectl create -f ${WORKSPACE}/k8s-logging/rbac-config.yaml
                            helm init --force-upgrade --service-account tiller --kube-context gke_spacemesh-198810_us-central1-a_spacemesh-xxx
                            # Wait for tiller-deploy pod to be ready
                            sleep 30 
                            helm list --kube-context gke_spacemesh-198810_us-central1-a_spacemesh-xxx
                        """
                    }
                }    
            }
        }
        stage('Install ElasticSearch') {
            steps {
                container('helm') {
                    script {
                        sh """
                            echo "Install Elastic serach"
                            helm install -f ${WORKSPACE}/k8s-logging/elasticsearch/chart/values.yaml --name elasticsearch --namespace logging stable/elasticsearch
                            sleep 60
                        """
                        def deps=0
                        while ("${deps}"<4) {
                            println("Number of data pods is ${deps} going to sleep 1 min")
                            deps=sh(returnStdout: true, script: 'kubectl get pods -n logging | grep elasticsearch-data | grep Running | wc -l').trim().toInteger()
                            sleep(60)
                        }
                        println("Elasticsearch Installation ready")
                    }
                }
            }
        }
        stage('Install Kibana') {
            steps {
                container('helm') {
                    script {
                        sh """
                            echo "Install kibana"
                            helm install -f ${WORKSPACE}/k8s-logging/kibana/chart/values.yaml --name kibana --namespace logging stable/kibana
                            sleep 60
                        """
                        def deps=0
                        while ("${deps}"<1) {
                            println("Number of kibana pods is ${deps} going to sleep 1 min")
                            deps=sh(returnStdout: true, script: 'kubectl get pods -n logging | grep kibana | grep Running | wc -l').trim().toInteger()
                            sleep(60)
                        }
                        println("Kibana Installation ready")
                    }
                }
            }
        }
        stage('Install Fluent-bit') {
            steps {
                container('helm') {
                    script {
                        sh """
                            echo "Install Fluent-bit"
                            helm install -f ${WORKSPACE}/k8s-logging/fluent-bit/chart/values.yml --name fluent-bit --namespace logging stable/fluent-bit
                        """
                        while (true) {
                            def desired=sh(returnStdout: true, script: 'kubectl get daemonset -n logging | grep fluent-bit | awk \"{ print \\$2 }\"').trim().toInteger()
                            def ready=sh(returnStdout: true, script: 'kubectl get daemonset -n logging | grep fluent-bit | awk \"{ print \\$4 }\"').trim().toInteger()
                        
                            if ("${desired}" == "${ready}") break
                            
                            println("Fluent-bit Installation not ready. Sleeping 1 min")
                            sleep 60
                        }
                         
                    }
                }
            }
        }
        stage('Install FluentD') {
            steps {
                container('helm') {
                    script {
                        sh """
                            echo "Install FluentD"
                            helm install --name fluentd --namespace logging  -f ${WORKSPACE}/k8s-logging/fluentd/charts/values.yml stable/fluentd
                        """
                        while (true) {
                            def desired=sh(returnStdout: true, script: 'kubectl get deployment fluentd -n logging | grep fluentd | awk \"{ print \\$2 }\" | cut -d \"/\" -f1').trim().toInteger()
                            def ready=sh(returnStdout: true, script: 'kubectl get deployment fluentd -n logging | grep fluentd | awk \"{ print \\$2 }\" | cut -d \"/\" -f2').trim().toInteger()
                        
                            if ("${desired}" == "${ready}") break
                            
                            println("FluentD Installation not ready. Sleeping 1 min")
                            sleep 60
                        }
                    }
                }
            }
        }
        */       
    }
}
             